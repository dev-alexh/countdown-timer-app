{"version":3,"sources":["logo.svg","components/CountdownTimer.js","App.js","reportWebVitals.js","index.js"],"names":["CountdownTimer","props","state","breakLength","sessionLength","timerType","playing","sessionTimeLeft","sound","React","createRef","resetTimer","bind","breakIncrement","breakDecrement","sessionIncrement","sessionDecrement","playOrPause","countDownTimer","clearInterval","this","countDown","current","pause","currentTime","setState","setInterval","arr","split","play","Container","fluid","id","Row","Col","sm","icon","faArrowAltCircleUp","className","onClick","faArrowAltCircleDown","span","offset","faPauseCircle","faPlayCircle","faHistory","ref","src","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe6fdad2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowAltCircleUp, faArrowAltCircleDown, faHistory, faPauseCircle, faPlayCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport class CountdownTimer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            timerType: \"Session\",\r\n            playing: false,\r\n            sessionTimeLeft: \"25:00\"\r\n        };\r\n\r\n        this.sound = React.createRef();\r\n        this.resetTimer = this.resetTimer.bind(this);\r\n        this.breakIncrement = this.breakIncrement.bind(this);\r\n        this.breakDecrement = this.breakDecrement.bind(this);\r\n        this.sessionIncrement = this.sessionIncrement.bind(this);\r\n        this.sessionDecrement = this.sessionDecrement.bind(this);\r\n        this.playOrPause = this.playOrPause.bind(this);\r\n        this.countDownTimer = this.countDownTimer.bind(this);\r\n    }\r\n\r\n    resetTimer() {\r\n        clearInterval(this.countDown);\r\n        this.sound.current.pause();\r\n        this.sound.current.currentTime = 0;\r\n        this.setState({\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            timerType: \"Session\",\r\n            playing: false,\r\n            sessionTimeLeft: \"25:00\"\r\n        });\r\n    }\r\n\r\n    breakIncrement() {\r\n        this.setState((state) => {\r\n            if (state.breakLength < 60 && !state.playing) {\r\n                if (state.timerType == \"Break\") {\r\n                    if (state.breakLength < 9) {\r\n                        return {\r\n                            breakLength: state.breakLength + 1,\r\n                            sessionLength: state.sessionLength,\r\n                            timerType: state.timerType,\r\n                            playing: state.playing,\r\n                            sessionTimeLeft: \"0\" + (state.breakLength + 1) + \":00\"\r\n                        };\r\n                    }\r\n                    return {\r\n                        breakLength: state.breakLength + 1,\r\n                        sessionLength: state.sessionLength,\r\n                        timerType: state.timerType,\r\n                        playing: state.playing,\r\n                        sessionTimeLeft: state.breakLength + 1 + \":00\"\r\n                    };\r\n                }\r\n                return {\r\n                    breakLength: state.breakLength + 1,\r\n                    sessionLength: state.sessionLength,\r\n                    timerType: state.timerType,\r\n                    playing: state.playing,\r\n                    sessionTimeLeft: state.sessionTimeLeft\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    breakDecrement() {\r\n        this.setState((state) => {\r\n            if (state.breakLength > 1 && !state.playing) {\r\n                if (state.timerType == \"Break\") {\r\n                    if (state.breakLength < 11) {\r\n                        return {\r\n                            breakLength: state.breakLength - 1,\r\n                            sessionLength: state.sessionLength,\r\n                            timerType: state.timerType,\r\n                            playing: state.playing,\r\n                            sessionTimeLeft: \"0\" + (state.breakLength - 1) + \":00\"\r\n                        };\r\n                    }\r\n                    return {\r\n                        breakLength: state.breakLength - 1,\r\n                        sessionLength: state.sessionLength,\r\n                        timerType: state.timerType,\r\n                        playing: state.playing,\r\n                        sessionTimeLeft: state.breakLength - 1 + \":00\"\r\n                    };\r\n                }\r\n                return {\r\n                    breakLength: state.breakLength - 1,\r\n                    sessionLength: state.sessionLength,\r\n                    timerType: state.timerType,\r\n                    playing: state.playing,\r\n                    sessionTimeLeft: state.sessionTimeLeft\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    sessionIncrement() {\r\n        this.setState((state) => {\r\n            if (state.sessionLength < 60 && !state.playing) {\r\n                if (state.timerType == \"Session\") {\r\n                    if (state.sessionLength < 9) {\r\n                        return {\r\n                            breakLength: state.breakLength,\r\n                            sessionLength: state.sessionLength + 1,\r\n                            timerType: state.timerType,\r\n                            playing: state.playing,\r\n                            sessionTimeLeft: \"0\" + (state.sessionLength + 1) + \":00\"\r\n                        };\r\n                    }\r\n                    return {\r\n                        breakLength: state.breakLength,\r\n                        sessionLength: state.sessionLength + 1,\r\n                        timerType: state.timerType,\r\n                        playing: state.playing,\r\n                        sessionTimeLeft: state.sessionLength + 1 + \":00\"\r\n                    };\r\n                }\r\n                return {\r\n                    breakLength: state.breakLength,\r\n                    sessionLength: state.sessionLength + 1,\r\n                    timerType: state.timerType,\r\n                    playing: state.playing,\r\n                    sessionTimeLeft: state.sessionTimeLeft\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    sessionDecrement() {\r\n        this.setState((state) => {\r\n            if (state.sessionLength > 1 && !state.playing) {\r\n                if (state.timerType == \"Session\") {\r\n                    if (state.sessionLength < 11) {\r\n                        return {\r\n                            breakLength: state.breakLength,\r\n                            sessionLength: state.sessionLength - 1,\r\n                            timerType: state.timerType,\r\n                            playing: state.playing,\r\n                            sessionTimeLeft: \"0\" + (state.sessionLength - 1) + \":00\"\r\n                        };\r\n                    }\r\n                    return {\r\n                        breakLength: state.breakLength,\r\n                        sessionLength: state.sessionLength - 1,\r\n                        timerType: state.timerType,\r\n                        playing: state.playing,\r\n                        sessionTimeLeft: state.sessionLength - 1 + \":00\"\r\n                    };\r\n                }\r\n                return {\r\n                    breakLength: state.breakLength,\r\n                    sessionLength: state.sessionLength - 1,\r\n                    timerType: state.timerType,\r\n                    playing: state.playing,\r\n                    sessionTimeLeft: state.sessionTimeLeft\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    countDownTimer() {\r\n        this.countDown = setInterval(() => {\r\n            this.setState((state) => {\r\n                if (state.playing && state.timerType == \"Session\") {\r\n                    const arr = state.sessionTimeLeft.split(\":\");\r\n                    if (arr[1] == \"00\") {\r\n                        if (arr[0] != \"00\") {\r\n                            arr[1] = 59;\r\n                            if (arr[0] <= 10) {\r\n                                arr[0] = \"0\" + (arr[0] - 1);\r\n                            } else {\r\n                                arr[0]--;\r\n                            }\r\n                        } else {\r\n                            this.sound.current.currentTime = 0;\r\n                            this.sound.current.play();\r\n                            if (state.breakLength < 10) {\r\n                                return {\r\n                                    breakLength: state.breakLength,\r\n                                    sessionLength: state.sessionLength,\r\n                                    timerType: \"Break\",\r\n                                    playing: state.playing,\r\n                                    sessionTimeLeft: \"0\" + state.breakLength + \":\" + \"00\"\r\n                                };\r\n                            }\r\n                            return {\r\n                                breakLength: state.breakLength,\r\n                                sessionLength: state.sessionLength,\r\n                                timerType: \"Break\",\r\n                                playing: state.playing,\r\n                                sessionTimeLeft: state.breakLength + \":\" + \"00\"\r\n                            };\r\n                        }\r\n                    } else {\r\n                        if (arr[1] <= 10) {\r\n                            arr[1] = \"0\" + (arr[1] - 1);\r\n                        } else {\r\n                            arr[1]--;\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        breakLength: state.breakLength,\r\n                        sessionLength: state.sessionLength,\r\n                        timerType: state.timerType,\r\n                        playing: state.playing,\r\n                        sessionTimeLeft: arr[0] + \":\" + arr[1]\r\n                    };\r\n                }\r\n                if (state.playing && state.timerType == \"Break\") {\r\n                    const arr = state.sessionTimeLeft.split(\":\");\r\n                    if (arr[1] == \"00\") {\r\n                        if (arr[0] != \"00\") {\r\n                            arr[1] = 59;\r\n                            if (arr[0] <= 10) {\r\n                                arr[0] = \"0\" + (arr[0] - 1);\r\n                            } else {\r\n                                arr[0]--;\r\n                            }\r\n                        } else {\r\n                            this.sound.current.currentTime = 0;\r\n                            this.sound.current.play();\r\n                            if (state.sessionLength < 10) {\r\n                                return {\r\n                                    breakLength: state.breakLength,\r\n                                    sessionLength: state.sessionLength,\r\n                                    timerType: \"Session\",\r\n                                    playing: state.playing,\r\n                                    sessionTimeLeft: \"0\" + state.sessionLength + \":\" + \"00\"\r\n                                };\r\n                            }\r\n                            return {\r\n                                breakLength: state.breakLength,\r\n                                sessionLength: state.sessionLength,\r\n                                timerType: \"Session\",\r\n                                playing: state.playing,\r\n                                sessionTimeLeft: state.sessionLength + \":\" + \"00\"\r\n                            };\r\n                        }\r\n                    } else {\r\n                        if (arr[1] <= 10) {\r\n                            arr[1] = \"0\" + (arr[1] - 1);\r\n                        } else {\r\n                            arr[1]--;\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        breakLength: state.breakLength,\r\n                        sessionLength: state.sessionLength,\r\n                        timerType: state.timerType,\r\n                        playing: state.playing,\r\n                        sessionTimeLeft: arr[0] + \":\" + arr[1]\r\n                    };\r\n                }\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    playOrPause() {\r\n        this.setState((state) => {\r\n            if (state.playing) {\r\n                clearInterval(this.countDown);\r\n                return {\r\n                    breakLength: state.breakLength,\r\n                    sessionLength: state.sessionLength,\r\n                    timerType: state.timerType,\r\n                    playing: false,\r\n                    sessionTimeLeft: state.sessionTimeLeft\r\n                };\r\n            } else {\r\n                return {\r\n                    breakLength: state.breakLength,\r\n                    sessionLength: state.sessionLength,\r\n                    timerType: state.timerType,\r\n                    playing: true,\r\n                    sessionTimeLeft: state.sessionTimeLeft\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h1>Session and Break: Time it!</h1>\r\n                <Container fluid id=\"sessionBreakBox\">\r\n                    <Row id=\"breakAndSessionTimer\">\r\n                        <Col sm={3}>\r\n                            <p id=\"break-label\">Break Timer:</p>\r\n                            <FontAwesomeIcon\r\n                                icon={faArrowAltCircleUp}\r\n                                className=\"iconSize\"\r\n                                id=\"break-increment\"\r\n                                onClick={this.breakIncrement}\r\n                            />\r\n                            <FontAwesomeIcon\r\n                                icon={faArrowAltCircleDown}\r\n                                className=\"iconSize\"\r\n                                id=\"break-decrement\"\r\n                                onClick={this.breakDecrement}\r\n                            />\r\n                        </Col>\r\n                        <Col sm={3}>\r\n                            <div id=\"break-length\">{this.state.breakLength}</div>\r\n                        </Col>\r\n                        <Col sm={3}>\r\n                            <p id=\"session-label\">Session Timer:</p>\r\n                            <FontAwesomeIcon\r\n                                icon={faArrowAltCircleUp}\r\n                                className=\"iconSize\"\r\n                                id=\"session-increment\"\r\n                                onClick={this.sessionIncrement}\r\n                            />\r\n                            <FontAwesomeIcon\r\n                                icon={faArrowAltCircleDown}\r\n                                className=\"iconSize\"\r\n                                id=\"session-decrement\"\r\n                                onClick={this.sessionDecrement}\r\n                            />\r\n                        </Col>\r\n                        <Col sm={3}>\r\n                            <div id=\"session-length\">{this.state.sessionLength}</div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col sm={{ span: 3, offset: 3 }}>\r\n                            <p id=\"timer-label\">{this.state.timerType}</p>\r\n                            {this.state.playing ? (\r\n                                <FontAwesomeIcon\r\n                                    icon={faPauseCircle}\r\n                                    className=\"iconSize\"\r\n                                    id=\"start_stop\"\r\n                                    onClick={this.playOrPause}\r\n                                />\r\n                            ) : (\r\n                                    <FontAwesomeIcon\r\n                                        icon={faPlayCircle}\r\n                                        className=\"iconSize\"\r\n                                        id=\"start_stop\"\r\n                                        onClick={() => {\r\n                                            this.playOrPause();\r\n                                            this.countDownTimer();\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            <FontAwesomeIcon\r\n                                icon={faHistory}\r\n                                className=\"iconSize\"\r\n                                id=\"reset\"\r\n                                onClick={this.resetTimer}\r\n                            />\r\n                        </Col>\r\n                        <Col sm={2}>\r\n                            <p id=\"time-left\">{this.state.sessionTimeLeft}</p>\r\n                        </Col>\r\n                        <audio\r\n                            id=\"beep\"\r\n                            ref={this.sound}\r\n                            src=\"https://sampleswap.org/samples-ghost/MELODIC%20LOOPS/KEYS%20ORGAN%20PIANO%20LOOPS/693[kb]120_hard-happy-piano-line.aif.mp3\"\r\n                        />\r\n                    </Row>\r\n                </Container>\r\n            </Container>\r\n        );\r\n    }\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { CountdownTimer } from './components/CountdownTimer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <CountdownTimer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}